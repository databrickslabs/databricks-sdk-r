# Code generated from OpenAPI specs by Databricks SDK Generator. DO NOT EDIT.{{if .IsAccounts}}{{skipThisFile}}{{end}}

#' @importFrom stats runif
NULL

{{range .Methods}}{{.Comment "#' " 80}}
#' @param client Required. Instance of DatabricksClient()
{{if .Request}}#'{{range .Request.Fields}}
#' @param {{.SnakeName}} {{if .Required}}Required. {{end}}{{with .Summary}}{{.}}{{else}}This field has no description yet.{{end}}{{end}}
{{end}}{{if .Pagination}}#'
#' @return `data.frame` with all of the response pages.
{{end}}#'
#' @rdname {{.AsFlat.SnakeName}}
#' @alias {{.Service.CamelName}}{{.PascalName}}
#' @export 
{{- $hasRequiredFields := and .Request (gt (len .Request.RequiredFields) 0) }}
{{.AsFlat.SnakeName}} <- function(client{{- if .Request}}{{range .Request.RequiredFields}}, {{.SnakeName}}{{end -}}
    {{- range .Request.NonRequiredFields}}, {{.SnakeName}}=NULL{{end}}
    {{- end}}) {
    {{- template "method-serialize" .}}
    {{template "method-call" .}}
}

#' @rdname {{.AsFlat.SnakeName}}
#' @export 
{{.Service.CamelName}}{{.PascalName}} <- {{.AsFlat.SnakeName}}
{{end}}
{{- range .Methods}}{{if and .Wait (not .IsCrudRead)}}{{.Comment "#' " 80}}
#' @param client Required. Instance of DatabricksClient()
{{if .Request}}
#'
#' @description
#' This is a long-running operation, which blocks until {{.Service.TitleName}} on Databricks reach
#' {{range $i, $s := .Wait.Success}}{{if $i}} or {{end}}{{.Content}}{{end}} state with the timeout of {{.Wait.Timeout}} minutes, that you can change via `timeout` parameter.
#' By default, the state of Databricks {{.Service.TitleName}} is reported to console. You can change this behavior
#' by changing the `callback` parameter.
#' @param timeout Time to wait for the operation to complete in minutes.
#' @param callback Function to report the status of the operation. By default, it reports to console.
#'{{range .Request.Fields}}
#' @param {{.SnakeName}} {{if .Required}}Required. {{end}}{{with .Summary}}{{.}}{{else}}This field has no description yet.{{end}}{{end}}
{{end}}#'
#' @rdname {{.AsFlat.SnakeName}}_and_wait
#' @export 
{{- $hasRequiredFields := and .Request (gt (len .Request.RequiredFields) 0) }}
{{.AsFlat.SnakeName}}_and_wait <- function(client{{- if .Request}}{{range .Request.RequiredFields}}, {{.SnakeName}}{{end -}}
    {{- range .Request.NonRequiredFields}}, {{.SnakeName}}=NULL{{end}}
    {{- end}}, timeout={{.Wait.Timeout}}, callback=cli_reporter) {
    {{- template "method-serialize" .}}
    {{template "method-call-retried" .}}
}
{{end}}
{{end}}

{{- define "method-serialize" -}}
    {{if .Request}}
    {{if .Request.HasQueryField}}{{$showComma := false}}query <- list({{range .Request.Fields}}{{if .IsQuery}}
        {{if $showComma }}, {{end}}{{.Name}} = {{.SnakeName}}{{$showComma = true}}{{end}}{{end}}){{end -}}
    {{- if .Request.HasJsonField}}{{$showComma := false}}body <- list({{range .Request.Fields}}{{if .IsJson}}
        {{if $showComma}}, {{end}}{{.Name}} = {{.SnakeName}}{{$showComma = true}}{{end}}{{end}}){{end -}}
    {{- end}}
{{- end -}}

{{- define "method-call" -}}
    {{if .Pagination -}}{{template "method-call-paginated" .}}
    {{- else}}{{template "method-call-default" .}}{{end}}
{{- end -}}

{{- define "method-call-paginated" -}}
    {{- if .Pagination.MultiRequest -}}
    {{if and .Pagination.Offset (not (eq .Path "/api/2.0/clusters/events")) }}
    query${{.Pagination.Offset.Name}} = {{if eq .Pagination.Increment 1}}1{{else}}0{{end}}{{end}}
    results <- data.frame()
    while (TRUE) {
        json <- {{template "method-do" .}}
        if (is.null(nrow(json${{.Pagination.Results.Name}}))) {
            break
        }
        # append this page of results to one results data.frame
        results <- dplyr::bind_rows(results, json${{.Pagination.Results.Name}})
        {{if eq .Path "/api/2.0/clusters/events" -}}
        if (is.null(json$next_page)) {
            break
        }
        body <- json$next_page
        {{- else if .Pagination.Token -}}
        if (is.null(json${{.Pagination.Token.Bind.Name}})) {
            break
        }
        {{if eq "GET" .Verb}}query{{else}}body{{end}}${{.Pagination.Token.PollField.Name}} <- json${{.Pagination.Token.Bind.Name}}
        {{- else if eq .Pagination.Increment 1 -}}
        query${{.Pagination.Offset.Name}} <- query${{.Pagination.Offset.Name}} + 1
        {{- else -}}
        query${{.Pagination.Offset.Name}} <- query${{.Pagination.Offset.Name}} + nrow(json${{.Pagination.Results.Name}})
        {{- end}}
    }
    {{if .NeedsOffsetDedupe -}}
    # de-duplicate any records via {{.IdentifierField.Name}} column
    results <- results[!duplicated(results${{.IdentifierField.Name}}), ]
    {{end -}}
    return (results)
    {{else}}
    json <- {{template "method-do" .}}
    return (json{{if .Pagination.Results}}${{.Pagination.Results.Name}}{{end}})
    {{end}}
{{- end -}}

{{- define "method-call-retried" -}}
    {{if .Response}}op_response <- {{end}}{{template "method-do" .}}
    started <- as.numeric(Sys.time())
    target_states <- c({{range .Wait.Success}}"{{.Content}}", {{end}}c()){{if .Wait.Failure}}
    failure_states <- c({{range .Wait.Failure}}"{{.Content}}", {{end}}c()){{end}}
    status_message <- 'polling...'
    attempt <- 1
    while ((started + (timeout*60)) > as.numeric(Sys.time())) {
        poll <- {{.Service.CamelName}}{{.Wait.Poll.PascalName}}(client, {{range $i, $b := .Wait.Binding}}{{if $i}}, {{end -}}
            {{$b.PollField.SnakeName}} = {{if $b.IsResponseBind}}op_response${{$b.Bind.Name}}{{else}}{{$b.Bind.SnakeName}}{{end}}
        {{- end}})
        status <- poll{{range .Wait.StatusPath}}${{.SnakeName}}{{end}}
        {{if .Wait.ComplexMessagePath -}}
        status_message <- paste("current status:", status)
        if (!is.null(poll${{.Wait.MessagePathHead.SnakeName}})) {
            status_message <- poll{{range .Wait.MessagePath}}${{.SnakeName}}{{end}}
        }
        {{- else if .Wait.MessagePath -}}
        status_message <- poll{{range .Wait.MessagePath}}${{.SnakeName}}{{end}}
        {{- else -}}
        status_message <- paste("current status:", status)
        {{- end}}
        if (status %in% target_states) {
            if (!is.null(callback)) {
                callback(paste0(status, ": ", status_message), done=TRUE)
            }
            return (poll)
        }
        {{if .Wait.Failure -}}
        if (status %in% failure_states) {
            msg <- paste("failed to reach {{range $i, $e := .Wait.Success}}{{if $i}} or {{end}}{{$e.Content}}{{end}}, got ", status, "-", status_message)
            rlang::abort(msg, call = rlang::caller_env())
        }
        {{end}}prefix <- paste0("databricks::{{.Service.CamelName}}{{.Wait.Poll.PascalName}}({{range $i, $b := .Wait.Binding}}{{if $i}}, "{{end -}}
            {{$b.PollField.SnakeName}}=", {{if $b.IsResponseBind}}op_response${{$b.Bind.Name}}{{else}}{{$b.Bind.SnakeName}}{{end}}
        {{- end}}, ")")
        sleep <- attempt
        if (sleep > 10) {
            # sleep 10s max per attempt
            sleep <- 10
        }
        if (!is.null(callback)) {
            callback(paste0(status, ": ", status_message), done=FALSE)
        }
        random_pause <- runif(1, min = 0.1, max = 0.5)
        Sys.sleep(sleep + random_pause)
        attempt <- attempt + 1
    }
    msg <- paste("timed out after", timeout, "minutes:", status_message)
    rlang::abort(msg, call = rlang::caller_env())
{{- end -}}

{{- define "method-call-default" -}}
    {{template "method-do" .}}
{{- end -}}

{{- define "method-do" -}}
client$do("{{.Verb}}", {{if .PathParts -}}paste({{range  .PathParts}}"{{.Prefix}}", {{if .Field}}{{.Field.SnakeName}}{{else if .IsAccountId}}client$account_id{{end}}, {{ end }}sep = "")
    {{- else}}"{{.Path}}"{{end}}{{if .Request}}{{if .Request.HasQueryField}}, query = query{{end}}{{if .Request.HasJsonField}}, body = body{{end}}{{end}})
{{- end -}}
